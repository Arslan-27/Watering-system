#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <WiFiClient.h>
#include <TimeLib.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>

// WiFi credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// Pump control pin
const int pumpPin = D1;
// Moisture sensor pin (analog)
const int moisturePin = A0;

// Web server
ESP8266WebServer server(80);

// NTP client for time synchronization
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

// Variables for scheduling
String schedules[10];  // Store up to 10 schedules
int scheduleCount = 0;
String alarms[10];     // Store up to 10 alarms
int alarmCount = 0;

// Moisture sensor calibration
const int dryValue = 1024;  // Value when dry (0% moisture)
const int wetValue = 300;   // Value when wet (100% moisture)

void setup() {
  Serial.begin(115200);
  pinMode(pumpPin, OUTPUT);
  digitalWrite(pumpPin, LOW);  // Start with pump off
  pinMode(moisturePin, INPUT);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Start NTP client
  timeClient.begin();
  timeClient.setTimeOffset(0);  // Adjust for your timezone

  // Setup web server routes
  server.on("/", handleRoot);
  server.on("/pump_on", handlePumpOn);
  server.on("/pump_off", handlePumpOff);
  server.on("/status", handleStatus);
  server.on("/moisture", handleMoisture);
  server.on("/add_schedule", handleAddSchedule);
  server.on("/add_alarm", handleAddAlarm);
  server.on("/get_schedules", handleGetSchedules);
  server.on("/get_alarms", handleGetAlarms);
  
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
  timeClient.update();
  
  // Check schedules and alarms
  checkSchedules();
  checkAlarms();
  
  delay(1000);  // Short delay to prevent watchdog reset
}

// Read and map moisture level (0-100%)
int readMoistureLevel() {
  int sensorValue = analogRead(moisturePin);
  // Map the sensor value from dryValue (0%) to wetValue (100%)
  int moisture = map(sensorValue, dryValue, wetValue, 0, 100);
  // Constrain to 0-100%
  moisture = constrain(moisture, 0, 100);
  return moisture;
}

void handleRoot() {
  String html = "<html><head><title>Pump Controller</title></head><body>";
  html += "<h1>Pump Controller</h1>";
  html += "<p>Current Pump Status: " + String(digitalRead(pumpPin) ? "ON" : "OFF") + "</p>";
  html += "<p>Current Moisture Level: " + String(readMoistureLevel()) + "%</p>";
  html += "<p><a href='/pump_on'>Turn Pump ON</a></p>";
  html += "<p><a href='/pump_off'>Turn Pump OFF</a></p>";
  html += "<p><a href='/moisture'>Get Moisture Level</a></p>";
  html += "</body></html>";
  
  server.send(200, "text/html", html);
}

void handleMoisture() {
  int moisture = readMoistureLevel();
  
  DynamicJsonDocument doc(256);
  doc["moisture"] = moisture;
  doc["timestamp"] = getFormattedTime();
  
  String response;
  serializeJson(doc, response);
  
  server.send(200, "application/json", response);
}

// ... [keep all other handler functions the same as previous version] ...

void checkSchedules() {
  String currentTime = getFormattedTime();
  String currentDay = getCurrentDay();
  
  for (int i = 0; i < scheduleCount; i++) {
    String parts[3];
    splitString(schedules[i], ',', parts, 3);
    
    String day = parts[0];
    String startTime = parts[1];
    String endTime = parts[2];
    
    // Check if schedule applies today
    if (day == "Everyday" || day == currentDay) {
      // Check if current time is within schedule
      if (currentTime >= startTime && currentTime <= endTime) {
        digitalWrite(pumpPin, HIGH);  // Turn pump on
      } else {
        digitalWrite(pumpPin, LOW);  // Turn pump off
      }
    }
  }
  
  // Additional logic: Auto water if moisture too low
  int moisture = readMoistureLevel();
  if (moisture < 30) {  // Threshold for low moisture
    digitalWrite(pumpPin, HIGH);
    delay(30000);  // Water for 30 seconds
    digitalWrite(pumpPin, LOW);
  }
}

// ... [keep all other helper functions the same as previous version] ...
